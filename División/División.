; ================================================
; División de dos enteros (32 bits)
; Asignatura: Diseño y Estructura de Computadoras
; Carnet: MS23056
; ================================================

section .data
    num1    dd 100        ; Dividendo
    num2    dd 5          ; Divisor
    msg     db "El resultado es: ", 0
    newline db 10, 0

section .bss
    resultado resb 10

section .text
    global _start

_start:
    ; Mostrar mensaje inicial
    mov eax, 4          ; syscall write
    mov ebx, 1          ; file descriptor (stdout)
    mov ecx, msg        ; mensaje
    mov edx, 18         ; longitud del mensaje
    int 0x80

    ; Cargar los números
    mov eax, [num1]     ; EAX = dividendo
    cdq                 ; Extiende EAX a EDX:EAX para división
    mov ebx, [num2]     ; EBX = divisor
    idiv ebx            ; EAX = cociente, EDX = residuo

    ; Convertir EAX (resultado) a ASCII y guardarlo en 'resultado'
    mov ecx, resultado
    mov esi, eax
    call int_to_ascii

    ; Mostrar resultado
    mov eax, 4
    mov ebx, 1
    mov ecx, resultado
    mov edx, 10         ; hasta 10 dígitos
    int 0x80

    ; Nueva línea
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    ; Salir del programa
    mov eax, 1
    xor ebx, ebx
    int 0x80

;-----------------------------
; Convierte un número en ESI a ASCII y lo guarda en ECX
;-----------------------------
int_to_ascii:
    mov edi, ecx        ; puntero de escritura
    mov ecx, 10         ; divisor = 10
    xor ebx, ebx        ; limpio EBX
    mov edx, 0
.reverse:
    xor edx, edx
    div ecx             ; divide EAX entre 10, cociente en EAX, residuo en EDX
    add dl, '0'
    push dx
    inc ebx
    test eax, eax
    jnz .reverse

.print_digits:
    pop dx
    mov [edi], dl
    inc edi
    dec ebx
    jnz .print_digits
    ret

