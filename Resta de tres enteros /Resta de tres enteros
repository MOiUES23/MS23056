; ================================================
; Resta de tres enteros (16 bits)
; Asignatura: Diseño y Estructura de Computadoras
; Carnet: MS23056
; ================================================

section .data
    num1 dw 15              ; Primer número
    num2 dw 7               ; Segundo número
    num3 dw 3               ; Tercer número
    mensaje db "Resultado: ", 0
    saltoLinea db 10

section .bss
    buffer resb 7           ; +1 por si hay signo negativo

section .text
    global _start

_start:
    ; Realizar la resta
    mov ax, [num1]
    sub ax, [num2]
    sub ax, [num3]

    ; Guardamos en EAX para la conversión
    movsx eax, ax           ; Sign extend AX → EAX (porque puede ser negativo)

    ; Comprobar si es negativo
    cmp eax, 0
    jge convertir
    neg eax
    mov byte [buffer], '-'  ; signo negativo
    mov esi, buffer + 1
    jmp convertir_ascii

convertir:
    mov esi, buffer         ; sin signo

convertir_ascii:
    mov edi, esi
    mov ecx, 0
    mov ebx, 10
    add edi, 5              ; apunta al final del buffer
    mov byte [edi], 0

reverse_loop:
    xor edx, edx
    div ebx
    add dl, '0'
    dec edi
    mov [edi], dl
    inc ecx
    test eax, eax
    jnz reverse_loop

    ; Imprimir mensaje
    mov eax, 4
    mov ebx, 1
    mov ecx, mensaje
    mov edx, 10
    int 0x80

    ; Imprimir resultado
    mov eax, 4
    mov ebx, 1
    mov ecx, edi            ; desde donde empieza el número
    mov edx, buffer + 6
    sub edx, edi            ; longitud
    int 0x80

    ; Imprimir salto de línea
    mov eax, 4
    mov ebx, 1
    mov ecx, saltoLinea
    mov edx, 1
    int 0x80

    ; Salir del programa
    mov eax, 1
    xor ebx, ebx
    int 0x80

